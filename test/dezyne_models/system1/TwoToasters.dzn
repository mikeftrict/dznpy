// TwoToasters
//
// Description: example Dezyne file intentionally contains two systems with varying namespaces.
//

// Contained component(s)
import Toaster.dzn;
import Hardware/Interfaces/PowerCordArmor.dzn;

// Facilities
import FCTimer.dzn;

// Global namespace:
component ToasterOne
{
provides My.Project.IToaster api;
requires external Some.Vendor.IHeaterElement heaterElement;
requires external My.Project.Hal.IExtPowerCord cord;
requires external My.ILed led;

system
{
    // Connect the ports on the public boundary
    api <=> sut.api;
    heaterElement <=> sut.heater;
    cord <=> powerCordArmor.ext;
    led <=> sut.led;

    // Connect the private/internal ports
    sut.cord <=> powerCordArmor.api;
    sut.timer <=> t1.api;

    // Build instances of internal components
    My.Project.Toaster sut;
    My.Project.PowerCordArmor powerCordArmor;
    Facilities.Timer t1;

} // system
} // end component

namespace My { namespace Project {

component ToasterTwo
{
provides IToaster api;
requires Some.Vendor.IHeaterElement heaterElement;
requires Hal.IPowerCord cord;
requires ILed led;

system
{
    // Connect the ports on the public boundary
    api <=> sut.api;
    heaterElement <=> sut.heater;
    cord <=> sut.cord;
    led <=> sut.led;

    // Connect the private/internal ports
    sut.timer <=> t1.api;

    // Build instances of internal components
    Toaster sut;
    Facilities.Timer t1;

} // system
} // end component
}} // end namespace My::Project
