"""
Testsuite validating the ability and output of generated support files.

Copyright (c) 2023-2024 Michael van de Ven <michael@ftr-ict.com>
This is free software, released under the MIT License. Refer to dznpy/LICENSE.
"""

# system modules
import pytest

# dznpy modules
from dznpy.misc_utils import namespaceids_t

# systems-under-test
from dznpy.support_files import misc_utils as sut

# Test data
from dznpy.dznpy_version import VERSION


def template_hh(ns_prefix: str) -> str:
    return """\
// Miscellaneous utilities
//
// Description: miscellaneous utilities for generic usage.
//
// Contents:
// - capitalize the first character of a std::string or std::wstring.
//
// Examples of CapitalizeFirstChar:
//
//    std::string mystr{"hello"};
//    auto result = CapitalizeFirstChar(mystr); // result == std::string("Hello")
//
//    std::wstring mywstr{L"world"};
//    auto result = CapitalizeFirstChar(mywstr); // result == std::wstring(L"World")
//
//    auto result = CapitalizeFirstChar(std::string("")); // result = std::string("")
//
//
// This is generated code. DO NOT MODIFY manually.
//
// Copyright (c) 2023-2024 Michael van de Ven <michael@ftr-ict.com>
// This is free software, released under the MIT License. Refer to dznpy/LICENSE.

// System includes
#include <algorithm>
#include <cctype>
#include <cwctype>
#include <regex>
#include <string>

namespace """ f'{ns_prefix}' """Dzn {

template <typename STR_TYPE>
[[nodiscard]] STR_TYPE CapitalizeFirstChar(const STR_TYPE& str)
{
    if (str.empty()) return str;

    STR_TYPE result(str);

    if constexpr (std::is_same_v<STR_TYPE, std::string>)
    {
        std::transform(result.cbegin(), result.cbegin() + 1, result.begin(), 
                       [](auto c) { return static_cast<char>(std::toupper(c)); });
    }

    if constexpr (std::is_same_v<STR_TYPE, std::wstring>)
    {
        std::transform(result.cbegin(), result.cbegin() + 1, result.begin(),
                       [](auto c) { return static_cast<wchar_t>(std::towupper(c)); });
    }

    return result;
}

} // namespace """ f'{ns_prefix}' """Dzn
// Generated by: dznpy/support_files v"""f'{VERSION}'"""
"""


DEFAULT_DZN_MISC_UTILS_HH = template_hh('')
PROJECT_DZN_MISC_UTILS_HH = template_hh('Project::')


def test_create_default_namespaced():
    result = sut.create_header()
    assert result.namespace == ['Dzn']
    assert result.filename == 'Dzn_MiscUtils.hh'
    assert result.contents == DEFAULT_DZN_MISC_UTILS_HH
    assert result.contents_hash == '766833274b151ab71240fbb9e4e6ab39'
    assert 'namespace Dzn {' in result.contents


def test_create_with_prefixing_namespace():
    result = sut.create_header(namespaceids_t('Project'))
    assert result.namespace == ['Project', 'Dzn']
    assert result.filename == 'Project_Dzn_MiscUtils.hh'
    assert result.contents == PROJECT_DZN_MISC_UTILS_HH
    assert 'namespace Project::Dzn {' in result.contents


def test_create_fail():
    with pytest.raises(TypeError) as exc:
        sut.create_header(123)
    assert str(exc.value) == 'namespace_prefix is of incorrect type'
